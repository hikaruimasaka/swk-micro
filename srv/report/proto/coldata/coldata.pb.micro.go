// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: coldata.proto

package coldata

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ColDataService service

func NewColDataServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ColDataService service

type ColDataService interface {
	FindColDatas(ctx context.Context, in *FindColDatasRequest, opts ...client.CallOption) (*FindColDatasResponse, error)
	SelectColData(ctx context.Context, in *SelectColDataRequest, opts ...client.CallOption) (*SelectColDataResponse, error)
	CreateColData(ctx context.Context, in *CreateColDataRequest, opts ...client.CallOption) (*CreateColDataResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (ColDataService_DownloadService, error)
}

type colDataService struct {
	c    client.Client
	name string
}

func NewColDataService(name string, c client.Client) ColDataService {
	return &colDataService{
		c:    c,
		name: name,
	}
}

func (c *colDataService) FindColDatas(ctx context.Context, in *FindColDatasRequest, opts ...client.CallOption) (*FindColDatasResponse, error) {
	req := c.c.NewRequest(c.name, "ColDataService.FindColDatas", in)
	out := new(FindColDatasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colDataService) SelectColData(ctx context.Context, in *SelectColDataRequest, opts ...client.CallOption) (*SelectColDataResponse, error) {
	req := c.c.NewRequest(c.name, "ColDataService.SelectColData", in)
	out := new(SelectColDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colDataService) CreateColData(ctx context.Context, in *CreateColDataRequest, opts ...client.CallOption) (*CreateColDataResponse, error) {
	req := c.c.NewRequest(c.name, "ColDataService.CreateColData", in)
	out := new(CreateColDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colDataService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (ColDataService_DownloadService, error) {
	req := c.c.NewRequest(c.name, "ColDataService.Download", &DownloadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &colDataServiceDownload{stream}, nil
}

type ColDataService_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResponse, error)
}

type colDataServiceDownload struct {
	stream client.Stream
}

func (x *colDataServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *colDataServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *colDataServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *colDataServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *colDataServiceDownload) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ColDataService service

type ColDataServiceHandler interface {
	FindColDatas(context.Context, *FindColDatasRequest, *FindColDatasResponse) error
	SelectColData(context.Context, *SelectColDataRequest, *SelectColDataResponse) error
	CreateColData(context.Context, *CreateColDataRequest, *CreateColDataResponse) error
	Download(context.Context, *DownloadRequest, ColDataService_DownloadStream) error
}

func RegisterColDataServiceHandler(s server.Server, hdlr ColDataServiceHandler, opts ...server.HandlerOption) error {
	type colDataService interface {
		FindColDatas(ctx context.Context, in *FindColDatasRequest, out *FindColDatasResponse) error
		SelectColData(ctx context.Context, in *SelectColDataRequest, out *SelectColDataResponse) error
		CreateColData(ctx context.Context, in *CreateColDataRequest, out *CreateColDataResponse) error
		Download(ctx context.Context, stream server.Stream) error
	}
	type ColDataService struct {
		colDataService
	}
	h := &colDataServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ColDataService{h}, opts...))
}

type colDataServiceHandler struct {
	ColDataServiceHandler
}

func (h *colDataServiceHandler) FindColDatas(ctx context.Context, in *FindColDatasRequest, out *FindColDatasResponse) error {
	return h.ColDataServiceHandler.FindColDatas(ctx, in, out)
}

func (h *colDataServiceHandler) SelectColData(ctx context.Context, in *SelectColDataRequest, out *SelectColDataResponse) error {
	return h.ColDataServiceHandler.SelectColData(ctx, in, out)
}

func (h *colDataServiceHandler) CreateColData(ctx context.Context, in *CreateColDataRequest, out *CreateColDataResponse) error {
	return h.ColDataServiceHandler.CreateColData(ctx, in, out)
}

func (h *colDataServiceHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(DownloadRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ColDataServiceHandler.Download(ctx, m, &colDataServiceDownloadStream{stream})
}

type ColDataService_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type colDataServiceDownloadStream struct {
	stream server.Stream
}

func (x *colDataServiceDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *colDataServiceDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *colDataServiceDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *colDataServiceDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *colDataServiceDownloadStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
