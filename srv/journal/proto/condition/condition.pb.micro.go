// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: condition.proto

package condition

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConditionService service

func NewConditionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConditionService service

type ConditionService interface {
	FindConditions(ctx context.Context, in *FindConditionsRequest, opts ...client.CallOption) (*FindConditionsResponse, error)
	AddCondition(ctx context.Context, in *AddConditionRequest, opts ...client.CallOption) (*AddConditionResponse, error)
}

type conditionService struct {
	c    client.Client
	name string
}

func NewConditionService(name string, c client.Client) ConditionService {
	return &conditionService{
		c:    c,
		name: name,
	}
}

func (c *conditionService) FindConditions(ctx context.Context, in *FindConditionsRequest, opts ...client.CallOption) (*FindConditionsResponse, error) {
	req := c.c.NewRequest(c.name, "ConditionService.FindConditions", in)
	out := new(FindConditionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conditionService) AddCondition(ctx context.Context, in *AddConditionRequest, opts ...client.CallOption) (*AddConditionResponse, error) {
	req := c.c.NewRequest(c.name, "ConditionService.AddCondition", in)
	out := new(AddConditionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConditionService service

type ConditionServiceHandler interface {
	FindConditions(context.Context, *FindConditionsRequest, *FindConditionsResponse) error
	AddCondition(context.Context, *AddConditionRequest, *AddConditionResponse) error
}

func RegisterConditionServiceHandler(s server.Server, hdlr ConditionServiceHandler, opts ...server.HandlerOption) error {
	type conditionService interface {
		FindConditions(ctx context.Context, in *FindConditionsRequest, out *FindConditionsResponse) error
		AddCondition(ctx context.Context, in *AddConditionRequest, out *AddConditionResponse) error
	}
	type ConditionService struct {
		conditionService
	}
	h := &conditionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConditionService{h}, opts...))
}

type conditionServiceHandler struct {
	ConditionServiceHandler
}

func (h *conditionServiceHandler) FindConditions(ctx context.Context, in *FindConditionsRequest, out *FindConditionsResponse) error {
	return h.ConditionServiceHandler.FindConditions(ctx, in, out)
}

func (h *conditionServiceHandler) AddCondition(ctx context.Context, in *AddConditionRequest, out *AddConditionResponse) error {
	return h.ConditionServiceHandler.AddCondition(ctx, in, out)
}
